function [] = plotFitAndLearningCurvesGivenLambda(X, y, X_poly, X_poly_val, yval, X_poly_test, ytest, mu, sigma, p, m, lambda)%% PLOTFITWITHGIVENLAMBDA Plots the fit to the data obtained with the theta learned from the given lambda% (remember X_val can be made of polynomial features) and also plots the learning curves[theta] = trainLinearReg(X_poly, y, lambda);% Plot training data and fitfigure(1);plot(X, y, 'rx', 'MarkerSize', 10, 'LineWidth', 1.5);plotFit(min(X), max(X), mu, sigma, theta, p);xlabel('Change in water level (x)');ylabel('Water flowing out of the dam (y)');title (sprintf('Polynomial Regression Fit (lambda = %f)', lambda));[error_train, error_val, error_test] = ...    learningCurve(X_poly, y, X_poly_val, yval, X_poly_test, ytest, lambda);% Plot learning curvesfigure(2);plot(1:m, error_train, 1:m, error_val, 1:m, error_test);title(sprintf('Polynomial Regression Learning Curve (lambda = %f)', lambda));xlabel('Number of training examples')ylabel('Error')axis([0 13 0 100])legend('Train', 'Cross Validation', 'Test')fprintf('Polynomial Regression (lambda = %f)\n\n', lambda);fprintf('# Training Examples\tTrain Error\tCross Validation Error\tTest Error\n');for i = 1:m    fprintf('  \t%d\t\t%f\t%f\t\t%f\n', i, error_train(i), error_val(i), error_test(i));endfprintf('Program paused. Press enter to continue.\n\n');pause;end